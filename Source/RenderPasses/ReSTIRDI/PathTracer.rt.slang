#include "Scene/SceneDefines.slangh"
#include "Utils/Math/MathConstants.slangh"
#include "DataStructures.slang"
__exported import Scene.Scene;
__exported import Scene.Shading;
__exported import Scene.HitInfo;

import Scene.Raytracing;
import Scene.RaytracingInline;
import Scene.Intersection;
import Utils.Math.MathHelpers;
import Utils.Geometry.GeometryHelpers;
import Utils.Sampling.SampleGenerator;
import Rendering.Lights.LightHelpers;
import Rendering.RTXDI.RTXDI;
import Rendering.Materials.IsotropicGGX;
import Utils.Sampling.TinyUniformSampleGenerator;
import Utils.Math.BitTricks;
import Utils.Math.HashUtils;
import Utils.Sampling.Pseudorandom.LCG;
import NRC;

//#define USE_NRC 1

cbuffer CB
{
    uint gFrameCount;    // Frame count since scene was loaded.
    uint gPRNGDimension; // First available PRNG dimension.
}

// Inputs
Texture2D<PackedHitInfo> gVBuffer;
Texture2D<float4> gViewW; // Optional

// Outputs
RWTexture2D<float4> gOutputColor;
RWTexture2D<float4> gOutputReSTIRDI;
RWTexture2D<float4> gEmission;
RWTexture2D<float4> gDiffuseIllumination;
RWTexture2D<float4> gDiffuseReflectance;
RWTexture2D<float4> gSpecularIllumination;
RWTexture2D<float4> gSpecularReflectance;

//RWTexture2D<float4> gTrainPixel;
//RWTexture2D<float4> gTrainLength;

// Static configuration based on defines set from the host.
#define is_valid(name) (is_valid_##name != 0)
static const uint kMaxTrainingBounce = 3;
static const uint kMaxBounces = MAX_BOUNCES;
static const bool kComputeDirect = COMPUTE_DIRECT;
static const bool kUseImportanceSampling = USE_IMPORTANCE_SAMPLING;
static const bool kUseAnalyticLights = USE_ANALYTIC_LIGHTS;
static const bool kUseEmissiveLights = USE_EMISSIVE_LIGHTS;
static const bool kUseEnvLight = USE_ENV_LIGHT;
static const bool kUseEnvBackground = USE_ENV_BACKGROUND;
static const  float3 kDefaultBackgroundColor = float3(0, 0, 0);
static const float kRayTMax = FLT_MAX;
static const float C_Var = 0.01;

//
static bool trainPixel = false;
// static vertexRecord hitRecords[3];
//static uint idx = 0;
/**
 * Payload for shadow ray.
 */
struct ShadowRayData
{
    bool visible;
};

/**
 * Payload for scatter ray (up to 512B).
 */
struct ScatterRayData
{
    float3 radiance;  ///< Accumulated outgoing radiance from path.
    bool terminated;  ///< Set to true when path is terminated.
    float3 thp;       ///< Current path throughput. This is updated at each path vertex.
    uint pathLength;  ///< Path length in number of path segments (0 at origin, 1 at first secondary hit, etc.). Max 2^31.
    float3 origin;    ///< Next path segment origin.
//#ifdef USE_NRC
    float sqrtSpreadArea;
//#endif
    float3 direction; ///< Next path segment direction.

//#ifdef USE_NRC
    uint trainLength;
    float InitSpreadArea;
    float terminatedSpreadArea;
    float pdf;
    bool isTrainData;
    bool inTrainPixel;
    vertexRecord hitRecords[3];
//#endif
    SampleGenerator sg; ///< Per-ray state for the sample generator (up to 16B).
    

    /**
     * Initializes ray payload with default parameters.
     */
    __init(SampleGenerator sg)
    {
        this.terminated = false;
        this.pathLength = 0;
        this.radiance = float3(0, 0, 0);
        this.thp = float3(1, 1, 1);
        this.origin = float3(0, 0, 0);
        this.direction = float3(0, 0, 0);
        this.sg = sg;
//#ifdef USE_NRC
        this.trainLength = 0;
        this.sqrtSpreadArea = 0.0f;
        this.InitSpreadArea = 0.0f;
        this.terminatedSpreadArea = 0.0f;
        this.pdf = 0.0f;
        this.isTrainData = false;
        this.inTrainPixel = false;
//#endif
    }
};

/**
 * Setup ShadingData based on loaded vertex/material attributes for a hit point.
 * @param[in] hit Hit information.
 * @param[in] rayOrigin Ray origin.
 * @param[in] rayDir Normalized ray direction.
 * @param[in] lod Method for computing texture level-of-detail.
 * @return ShadingData struct.
 */
ShadingData loadShadingData(const HitInfo hit, const float3 rayOrigin, const float3 rayDir, const ITextureSampler lod)
{
    VertexData v = {};
    uint materialID = {};

#if SCENE_HAS_GEOMETRY_TYPE(GEOMETRY_TYPE_TRIANGLE_MESH)
    if (hit.getType() == HitType::Triangle)
    {
        const TriangleHit triangleHit = hit.getTriangleHit();
        v = gScene.getVertexData(triangleHit);
        materialID = gScene.getMaterialID(triangleHit.instanceID);
    }
#endif
#if SCENE_HAS_GEOMETRY_TYPE(GEOMETRY_TYPE_DISPLACED_TRIANGLE_MESH)
    if (hit.getType() == HitType::DisplacedTriangle)
    {
        const DisplacedTriangleHit displacedTriangleHit = hit.getDisplacedTriangleHit();
        v = gScene.getVertexData(displacedTriangleHit, -rayDir);
        materialID = gScene.getMaterialID(displacedTriangleHit.instanceID);
    }
#endif
#if SCENE_HAS_GEOMETRY_TYPE(GEOMETRY_TYPE_CURVE)
    if (hit.getType() == HitType::Curve)
    {
        const CurveHit curveHit = hit.getCurveHit();
        v = gScene.getVertexDataFromCurve(curveHit);
        materialID = gScene.getMaterialID(curveHit.instanceID);
    }
#endif
#if SCENE_HAS_GEOMETRY_TYPE(GEOMETRY_TYPE_SDF_GRID)
    if (hit.getType() == HitType::SDFGrid)
    {
        const SDFGridHit sdfGridHit = hit.getSDFGridHit();
        v = gScene.getVertexDataFromSDFGrid(sdfGridHit, rayOrigin, rayDir);
        materialID = gScene.getMaterialID(sdfGridHit.instanceID);
    }
#endif

    ShadingData sd = gScene.materials.prepareShadingData(v, materialID, -rayDir, lod);

    return sd;
}

/**
 * Returns the primary ray's direction.
 */
float3 getPrimaryRayDir(uint2 launchIndex, uint2 launchDim, const Camera camera)
{
    if (is_valid(gViewW))
    {
        // If we have the view vector bound as a buffer, just fetch it. No need to compute anything.
        return -gViewW[launchIndex].xyz;
    }
    else
    {
        // Compute the view vector. This must exactly match what the G-buffer pass is doing (jitter etc.).
        // Note that we do not take depth-of-field into account as it would require exactly matching the
        // sample generator between the passes, which is error prone. The host side will issue a warning instead.
        return camera.computeRayPinhole(launchIndex, launchDim).dir;
    }
}

/**
 * Traces a shadow ray towards a light source.
 * @param[in] origin Ray origin for the shadow ray.
 * @param[in] dir Direction from shading point towards the light source (normalized).
 * @param[in] distance Distance to the light source.
 * @return True if light is visible, false otherwise.
 */
bool traceShadowRay(float3 origin, float3 dir, float distance)
{
    RayDesc ray;
    ray.Origin = origin;
    ray.Direction = dir;
    ray.TMin = 0.f;
    ray.TMax = distance;

    ShadowRayData rayData;
    rayData.visible = false; // Set to true by miss shader if ray is not terminated before
    TraceRay(
        gScene.rtAccel,
        RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH,
        0xff /* instanceInclusionMask */,
        1 /* hitIdx */,
        rayTypeCount,
        1 /* missIdx */,
        ray,
        rayData
    );

    return rayData.visible;
}

/**
 * Traces a scatter ray based on ray parameters stored in the ray payload.
 * @param[in] rayData Describes the ray parameters. The struct is modified based on the result.
 */
void traceScatterRay(inout ScatterRayData rayData)
{
    RayDesc ray;
    ray.Origin = rayData.origin;
    ray.Direction = rayData.direction;
    ray.TMin = 0.f;
    ray.TMax = kRayTMax;

    uint rayFlags = 0; // TODO: Set cull mode from the app
    TraceRay(gScene.rtAccel, rayFlags, 0xff /* instanceInclusionMask */, 0 /* hitIdx */, rayTypeCount, 0 /* missIdx */, ray, rayData);
}

/**
 * Evaluates the direct illumination from analytic lights.
 * This function samples Falcor's light list uniformly with one shadow ray.
 * @param[in] sd Shading data.
 * @param[in] mi Material instance.
 * @param[in,out] sg SampleGenerator object.
 * @return Outgoing radiance in view direction.
 */
float3 evalDirectAnalytic(const ShadingData sd, const IMaterialInstance mi, inout SampleGenerator sg)
{
    const uint lightCount = gScene.getLightCount();
    if (lightCount == 0)
        return float3(0.f);

    // Pick one of the analytic light sources randomly with equal probability.
    const uint lightIndex = min(uint(sampleNext1D(sg) * lightCount), lightCount - 1);
    float invPdf = lightCount; // Light selection pdf = 1.0 / lightCount.

    // Sample local light source.
    AnalyticLightSample ls;
    if (!sampleLight(sd.posW, gScene.getLight(lightIndex), sg, ls))
        return float3(0.f);

    // Reject sample if not in the hemisphere of a BSDF lobe.
    const uint lobeTypes = mi.getLobeTypes(sd);
    const bool hasReflection = lobeTypes & uint(LobeType::Reflection);
    const bool hasTransmission = lobeTypes & uint(LobeType::Transmission);
    float NdotL = dot(sd.getOrientedFaceNormal(), ls.dir);
    if ((NdotL <= kMinCosTheta && !hasTransmission) || (NdotL >= -kMinCosTheta && !hasReflection))
        return float3(0.f);

    // Get origin with offset applied in direction of the geometry normal to avoid self-intersection.
    const float3 origin = computeRayOrigin(sd.posW, dot(sd.faceN, ls.dir) >= 0.f ? sd.faceN : -sd.faceN);

    // Test visibility by tracing a shadow ray.
    bool V = traceShadowRay(origin, ls.dir, ls.distance);
    if (!V)
        return float3(0.f);

    // Evaluate contribution.
    return mi.eval(sd, ls.dir, sg) * ls.Li * invPdf;
}

/**
 * Evaluates the direct illumination from ReSTIRDI.
 * This function samples Falcor's light list with ReSTIR algorithm.
 * @param[in] pixel Shading pixel.
 * @param[in] sd Shading data.
 * @param[in] mi Material Instance.
 * @return Outgoing radiance in view direction.
 */
float3 evalReSTIRDI(const uint2 pixel, ShadingData sd, const IMaterialInstance mi){
    float3 color = {};
    float3 emission = {};
    float3 diffuseReflectance = {};
    float3 diffuseIllumination = {};
    float3 specularReflectance = {};
    float3 specularIllumination = {};
    float hitT = 10000.f; // TODO: Remove magic number also used in SpatioTemporalResampling pass.

    let bsdfProperties = mi.getProperties(sd);

    float3 dir;
    float distance;
    float3 Li;
    bool valid = gRTXDI.getFinalSample(pixel, dir, distance, Li);

    if(valid){
        SceneRayQuery<1> rayQuery;
        const Ray ray = Ray(sd.computeRayOrigin(), dir, 0.f, distance);

        if (!rayQuery.traceVisibilityRay(ray, RAY_FLAG_NONE, 0xff))
        {
             valid = false;
        }
    }
    
    float3 diffuse = {};
    float3 specular = {};
    if (valid) {
        TinyUniformSampleGenerator sg = TinyUniformSampleGenerator(pixel, gFrameCount);

        sd.mtl.setActiveLobes((uint)LobeType::DiffuseReflection);
        diffuse = mi.eval(sd, dir, sg) * Li;

        sd.mtl.setActiveLobes((uint)LobeType::SpecularReflection);
        specular = mi.eval(sd, dir, sg) * Li;

        hitT = distance;
    }

    emission = bsdfProperties.emission;
    color = diffuse + specular + emission;
    // RTXDI uses a simple material model with only diffuse and specular reflection lobes.
    // We query the BSDF for the respective albedos and use them for demodulation below.

    // Demodulate diffuse reflectance (albedo) from diffuse color.
    diffuseReflectance = bsdfProperties.diffuseReflectionAlbedo;
    float3 diffuseFactor = select(diffuseReflectance <= 0.f, 0.f, 1.f / diffuseReflectance);
    diffuseIllumination = diffuse * diffuseFactor;

    // Demodulate preintegrated specular reflectance from specular color.
    // We use an approximate shading model with a single specular lobe.
    float NdotV = saturate(dot(bsdfProperties.guideNormal, sd.V));
    float ggxAlpha = bsdfProperties.roughness * bsdfProperties.roughness;
    specularReflectance = approxSpecularIntegralGGX(bsdfProperties.specularReflectance, ggxAlpha, NdotV);
    float3 specularFactor = select(specularReflectance <= 0.f, 0.f, 1.f / specularReflectance);
    specularIllumination = specular * specularFactor;

    if (is_valid(gOutputReSTIRDI))
        gOutputReSTIRDI[pixel] = float4(color, 1.f);
    if (is_valid(gEmission))
        gEmission[pixel] = float4(emission, 1.f);
    if (is_valid(gDiffuseReflectance))
        gDiffuseReflectance[pixel] = float4(diffuseReflectance, 1.f);
    if (is_valid(gDiffuseIllumination))
        gDiffuseIllumination[pixel] = float4(diffuseIllumination, hitT);
    if (is_valid(gSpecularReflectance))
        gSpecularReflectance[pixel] = float4(specularReflectance, 1.f);
    if (is_valid(gSpecularIllumination))
        gSpecularIllumination[pixel] = float4(specularIllumination, hitT);
    return color;
}


/**
 * Generate a new scatter ray or terminate.
 * @param[in] sd Shading data.
 * @param[in] mi Material instance.
 * @param[in] isCurveHit True if on curve hit.
 * @param[in] rayOrigin Ray origin for the new ray.
 * @param[in,out] rayData Ray payload.
 * @return True if the path continues.
 */
bool generateScatterRay(const ShadingData sd, const IMaterialInstance mi, bool isCurveHit, float3 rayOrigin, inout ScatterRayData rayData)
{
    // Sample material.
    BSDFSample bsdfSample;
    
    if (mi.sample(sd, rayData.sg, bsdfSample, kUseImportanceSampling))
    {
        rayData.origin = rayOrigin;
        if (!isCurveHit && bsdfSample.isLobe(LobeType::Transmission))
        {
            rayData.origin = sd.computeRayOrigin(false);
        }
        rayData.direction = bsdfSample.wo;
#ifdef USE_NRC
        rayData.pdf = bsdfSample.pdf;
#endif
        rayData.thp *= bsdfSample.weight;
        return any(rayData.thp > 0.f);
    }

    return false;
}

/**
 * Process a hit.
 * Loads the shading data, samples analytic lights and samples a new scatter ray.
 * Terminates the path if maximum number of bounces is reached.
 * @param[in] hit Hit info.
 * @param[in,out] rayData Ray payload.
 *
 */
void handleHit(const HitInfo hit, inout ScatterRayData rayData)
{
    const bool isCurveHit = hit.getType() == HitType::Curve;
    let lod = ExplicitLodTextureSampler(0.f);

    // Load shading data.
    ShadingData sd = loadShadingData(hit, rayData.origin, rayData.direction, lod);

    // Create material instance.
    let mi = gScene.materials.getMaterialInstance(sd, lod);

    //float3 currentPathRadiance = float3(0.0f);
    // Add emitted light.
    if (kUseEmissiveLights && (kComputeDirect || rayData.pathLength > 0))
    {
        rayData.radiance += rayData.thp * mi.getProperties(sd).emission;
        //currentPathRadiance += mi.getProperties(sd).emission;
    }

    uint2 pixel = DispatchRaysIndex().xy;

    if (!rayData.isTrainData && (rayData.pathLength >= kMaxBounces || pow(rayData.sqrtSpreadArea, 2) > C_Var * rayData.InitSpreadArea) ) {
        
        uint idx = gNRCQueryData.IncrementCounter();
        gNRCQueryData[idx] = generateQueryEntry(sd, mi);
        gNRCQueryPixel[idx] = pixel;
        gFactor[pixel] = float4(rayData.thp, 1.0f);
        if (rayData.inTrainPixel)
        {
            rayData.terminatedSpreadArea = rayData.sqrtSpreadArea;
            rayData.isTrainData = true;
        }
        else
        {
            rayData.terminated = true;
            return;
        }
    }

    if (rayData.isTrainData) {
        rayData.hitRecords[rayData.trainLength] = recordNode(sd, mi, rayData.radiance, rayData.thp);
        rayData.trainLength++;
    }

    // Check whether to terminate based on max depth.
    // if (rayData.isTrainData && rayData.trainLength >= kMaxTrainingBounce) {
    //     rayData.terminated = true;
    //     return;
    // }
    // if (rayData.pathLength >= kMaxBounces) {
    //     rayData.terminated = true;
    //     return;
    // }

    // Compute ray origin for new rays spawned from the hit.
    float3 rayOrigin;
    if (isCurveHit)
    {
        // For curves, we set the new origin at the sphere center.
        rayOrigin = sd.posW - sd.curveRadius * sd.frame.N;
    }
    else
    {
        rayOrigin = sd.computeRayOrigin();
    }

    // Add contribution of direct light from analytic lights.
    if (kUseAnalyticLights)
    {
        float3 Lr = evalDirectAnalytic(sd, mi, rayData.sg);
        rayData.radiance += rayData.thp * Lr;
    }
    
#ifdef USE_NRC
    float rayLengthPow2 = dot(rayOrigin - rayData.origin, rayOrigin - rayData.origin);
#endif

    // Generate scatter ray for the next path segment.
    // The raygen shader will continue the path based on the returned payload.
    if (!generateScatterRay(sd, mi, isCurveHit, rayOrigin, rayData))
    {
        // #ifdef USE_NRC
        //         uint idx = gNRCQueryData.IncrementCounter();
        //         gNRCQueryData[idx] = generateQueryEntry(sd, mi);
        //         gNRCQueryPixel[idx] = pixel;
        // #endif
        rayData.terminated = true;
        return;
    }

#ifdef USE_NRC
    rayData.sqrtSpreadArea += sqrt(rayLengthPow2 / (rayData.pdf * abs(dot(normalize(rayData.direction), normalize(sd.faceN)))));
    //|| pow(rayData.sqrtSpreadArea - rayData.terminatedSpreadArea, 2) > C_Var * rayData.InitSpreadArea
    if (rayData.isTrainData && (rayData.trainLength >= kMaxTrainingBounce)) {
        rayData.terminated = true;
    }
#endif

    rayData.pathLength++;
}

/**
 * This is the main entry point for the minimal path tracer.
 *
 * One path per pixel is generated, which is traced into the scene.
 * The path tracer is written as a for-loop over path segments.
 *
 * Built-in light sources (point, directional) are sampled explicitly at each
 * path vertex. The contributions from area lights (env map and mesh lights)
 * are explicitly added by the scatter ray hit/miss shaders.
 *
 * @param[in] pixel Pixel to trace a path for.
 * @param[in] frameDim Dimension of the frame in pixels.
 * @return Returns the estimated color (radiance).
 */
float3 tracePath(const uint2 pixel, const uint2 frameDim)
{
    float3 outColor = float3(0.f);

    const float3 primaryRayOrigin = gScene.camera.getPosition();
    const float3 primaryRayDir = getPrimaryRayDir(pixel, frameDim, gScene.camera);

    const HitInfo hit = HitInfo(gVBuffer[pixel]);
    if (hit.isValid())
    {
        // Pixel represents a valid primary hit. Compute its contribution.
        const bool isCurveHit = hit.getType() == HitType::Curve;
        let lod = ExplicitLodTextureSampler(0.f);

        // Load shading data.
        ShadingData sd = loadShadingData(hit, primaryRayOrigin, primaryRayDir, lod);

        // Create material instance at shading point.
        let mi = gScene.materials.getMaterialInstance(sd, lod);

        // Create sample generator.
        SampleGenerator sg = SampleGenerator(pixel, gFrameCount);

        // Advance the generator to the first available dimension.
        // TODO: This is potentially expensive. We may want to store/restore the state from memory if it becomes a problem.
        for (uint i = 0; i < gPRNGDimension; i++)
            sampleNext1D(sg);

        // Compute ray origin for new rays spawned from the G-buffer.
        float3 rayOrigin;
        if (isCurveHit)
        {
            // For curves, we set the new origin at the sphere center.
            rayOrigin = sd.posW - sd.curveRadius * sd.frame.N;
        }
        else
        {
            rayOrigin = sd.computeRayOrigin();
        }

        if (kComputeDirect)
        {
            outColor += evalReSTIRDI(pixel, sd, mi);
        }

        // Prepare ray payload.
        ScatterRayData rayData = ScatterRayData(sg);
        // Generate scatter ray.
        if (!generateScatterRay(sd, mi, isCurveHit, rayOrigin, rayData)) {
            rayData.terminated = true;
        }

#ifdef USE_NRC
        if (trainPixel) {
            rayData.inTrainPixel = true;   
        }

        float3 faceNormal = sd.getOrientedFaceNormal();
        rayData.InitSpreadArea = dot(rayOrigin - primaryRayOrigin, rayOrigin - primaryRayOrigin) / (M_4PI * dot(normalize(faceNormal), normalize(rayData.direction) ));
        while (!rayData.terminated) {
            traceScatterRay(rayData);
        }
#endif
        // Follow path into the scene and compute its total contribution.
        // for (uint depth = 0; depth <= kMaxBounces + kMaxTrainingBounce && !rayData.terminated; depth++)
        // {
        //     // Trace scatter ray. If it hits geometry, the closest hit shader samples
        //     // direct illumination and generates the next scatter ray.
        //     traceScatterRay(rayData);
        // }


        // Store contribution from scatter ray.
        outColor += rayData.radiance;

#ifdef USE_NRC
        for (uint i = 0; i < rayData.trainLength && trainPixel; i++) {
            float3 r = safe_div((rayData.radiance - rayData.hitRecords[i].radiance), rayData.hitRecords[i].thp);
            uint index = gTrainingData.IncrementCounter();
            gTrainingData[index].idx = index;
            gTrainingData[index].query = rayData.hitRecords[i].query;
            gTrainingData[index].radiance = safe_div((rayData.radiance - rayData.hitRecords[i].radiance), rayData.hitRecords[i].thp);
            gTrainingData[index].thp = rayData.hitRecords[i].thp;
        }
#endif

    }
    else
    {
        // Background pixel.
        outColor = kUseEnvBackground ? gScene.envMap.eval(primaryRayDir) : kDefaultBackgroundColor;
        if (is_valid(gOutputReSTIRDI))
            gOutputReSTIRDI[pixel] = float4(outColor, 1.f);
        gFactor[pixel] = float4(0.0f, 0.0f, 0.0f, 0.0f);
    }

    return outColor;
}

//
// Shader entry points for miss shaders.
//

[shader("miss")]
void scatterMiss(inout ScatterRayData rayData)
{
    // Ray missed the scene. Mark the ray as terminated.
    rayData.terminated = true;

    // Add contribution from distant light (env map) in this direction.
    if (kUseEnvLight && (kComputeDirect || rayData.pathLength > 0))
    {
        float3 Le = gScene.envMap.eval(WorldRayDirection());
        rayData.radiance += rayData.thp * Le;
    }
}

[shader("miss")]
void shadowMiss(inout ShadowRayData rayData)
{
    // The miss shader is executed if the ray misses all geometry. Mark as visible.
    rayData.visible = true;
}

//
// Shader entry points for TriangleMesh hit groups.
//

[shader("anyhit")]
void scatterTriangleMeshAnyHit(inout ScatterRayData rayData, BuiltInTriangleIntersectionAttributes attribs)
{
    // Alpha test for non-opaque geometry.
    GeometryInstanceID instanceID = getGeometryInstanceID();
    VertexData v = getVertexData(instanceID, PrimitiveIndex(), attribs);
    const uint materialID = gScene.getMaterialID(instanceID);
    if (gScene.materials.alphaTest(v, materialID, 0.f))
        IgnoreHit();
}

[shader("closesthit")]
void scatterTriangleMeshClosestHit(inout ScatterRayData rayData, BuiltInTriangleIntersectionAttributes attribs)
{
    TriangleHit triangleHit;
    triangleHit.instanceID = getGeometryInstanceID();
    triangleHit.primitiveIndex = PrimitiveIndex();
    triangleHit.barycentrics = attribs.barycentrics;
    handleHit(HitInfo(triangleHit), rayData);
}

[shader("anyhit")]
void shadowTriangleMeshAnyHit(inout ShadowRayData rayData, BuiltInTriangleIntersectionAttributes attribs)
{
    // Alpha test for non-opaque geometry.
    GeometryInstanceID instanceID = getGeometryInstanceID();
    VertexData v = getVertexData(instanceID, PrimitiveIndex(), attribs);
    const uint materialID = gScene.getMaterialID(instanceID);
    if (gScene.materials.alphaTest(v, materialID, 0.f))
        IgnoreHit();
}

//
// Shader entry points for DisplacedTriangleMesh hit groups.
//

[shader("intersection")]
void displacedTriangleMeshIntersection()
{
    const Ray ray = Ray(WorldRayOrigin(), WorldRayDirection(), RayTMin(), RayTCurrent());
    DisplacedTriangleMeshIntersector::Attribs attribs;
    float t;
    if (DisplacedTriangleMeshIntersector::intersect(ray, getGeometryInstanceID(), PrimitiveIndex(), attribs, t))
    {
        ReportHit(t, 0, attribs);
    }
}

[shader("closesthit")]
void scatterDisplacedTriangleMeshClosestHit(inout ScatterRayData rayData, DisplacedTriangleMeshIntersector::Attribs attribs)
{
    DisplacedTriangleHit displacedTriangleHit;
    displacedTriangleHit.instanceID = getGeometryInstanceID();
    displacedTriangleHit.primitiveIndex = PrimitiveIndex();
    displacedTriangleHit.barycentrics = attribs.barycentrics;
    displacedTriangleHit.displacement = attribs.displacement;
    handleHit(HitInfo(displacedTriangleHit), rayData);
}

//
// Shader entry points for Curve hit groups.
//

[shader("intersection")]
void curveIntersection()
{
    const Ray ray = Ray(WorldRayOrigin(), WorldRayDirection(), RayTMin(), RayTCurrent());
    CurveIntersector::Attribs attribs;
    float t;
    if (CurveIntersector::intersect(ray, getGeometryInstanceID(), PrimitiveIndex(), attribs, t))
    {
        ReportHit(t, 0, attribs);
    }
}

[shader("closesthit")]
void scatterCurveClosestHit(inout ScatterRayData rayData, CurveIntersector::Attribs attribs)
{
    CurveHit curveHit;
    curveHit.instanceID = getGeometryInstanceID();
    curveHit.primitiveIndex = PrimitiveIndex();
    curveHit.barycentrics = attribs.barycentrics;
    handleHit(HitInfo(curveHit), rayData);
}

//
// Shader entry points for SDFGrid hit groups.
//

[shader("intersection")]
void sdfGridIntersection()
{
    const Ray ray = Ray(WorldRayOrigin(), WorldRayDirection(), RayTMin(), RayTCurrent());
    SDFGridHitData sdfGridHitData;
    float t;
    if (SDFGridIntersector::intersect(ray, getGeometryInstanceID(), PrimitiveIndex(), sdfGridHitData, t))
    {
        ReportHit(t, 0, sdfGridHitData);
    }
}

[shader("closesthit")]
void scatterSdfGridClosestHit(inout ScatterRayData rayData, SDFGridHitData sdfGridHitData)
{
    SDFGridHit sdfGridHit;
    sdfGridHit.instanceID = getGeometryInstanceID();
    sdfGridHit.hitData = sdfGridHitData;
    handleHit(HitInfo(sdfGridHit), rayData);
}

//
// Shader entry point for ray generation shader.
//

[shader("raygeneration")]
void rayGen()
{
    uint2 pixel = DispatchRaysIndex().xy;
    uint2 frameDim = DispatchRaysDimensions().xy;

#ifdef USE_NRC
    uint seed = jenkinsHash(interleave_32bit(pixel));
    LCG rng = createLCG(seed);
    uint random = nextRandom(rng) % 100;
    if (random < 3) {
        trainPixel = true;
    }
#endif

    float3 color = tracePath(pixel, frameDim);
    gScreenResultWithoutNRC[pixel] = float4(color, 1.f);
}
